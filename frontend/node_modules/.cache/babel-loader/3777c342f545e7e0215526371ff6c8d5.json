{"ast":null,"code":"import rules from '../rule/';\nimport { isEmptyValue } from '../util';\n\nfunction type(rule, value, callback, source, options) {\n  var ruleType = rule.type;\n  var errors = [];\n  var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);\n\n  if (validate) {\n    if (isEmptyValue(value, ruleType) && !rule.required) {\n      return callback();\n    }\n\n    rules.required(rule, value, source, errors, options, ruleType);\n\n    if (!isEmptyValue(value, ruleType)) {\n      rules.type(rule, value, source, errors, options);\n    }\n  }\n\n  callback(errors);\n}\n\nexport default type;","map":{"version":3,"sources":["/Users/kidsama/Documents/Full_Stack/SpringbootVueMS/frontend/node_modules/async-validator/es/validator/type.js"],"names":["rules","isEmptyValue","type","rule","value","callback","source","options","ruleType","errors","validate","required","hasOwnProperty","field"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,UAAlB;AACA,SAASC,YAAT,QAA6B,SAA7B;;AAEA,SAASC,IAAT,CAAcC,IAAd,EAAoBC,KAApB,EAA2BC,QAA3B,EAAqCC,MAArC,EAA6CC,OAA7C,EAAsD;AACpD,MAAIC,QAAQ,GAAGL,IAAI,CAACD,IAApB;AACA,MAAIO,MAAM,GAAG,EAAb;AACA,MAAIC,QAAQ,GAAGP,IAAI,CAACQ,QAAL,IAAiB,CAACR,IAAI,CAACQ,QAAN,IAAkBL,MAAM,CAACM,cAAP,CAAsBT,IAAI,CAACU,KAA3B,CAAlD;;AACA,MAAIH,QAAJ,EAAc;AACZ,QAAIT,YAAY,CAACG,KAAD,EAAQI,QAAR,CAAZ,IAAiC,CAACL,IAAI,CAACQ,QAA3C,EAAqD;AACnD,aAAON,QAAQ,EAAf;AACD;;AACDL,IAAAA,KAAK,CAACW,QAAN,CAAeR,IAAf,EAAqBC,KAArB,EAA4BE,MAA5B,EAAoCG,MAApC,EAA4CF,OAA5C,EAAqDC,QAArD;;AACA,QAAI,CAACP,YAAY,CAACG,KAAD,EAAQI,QAAR,CAAjB,EAAoC;AAClCR,MAAAA,KAAK,CAACE,IAAN,CAAWC,IAAX,EAAiBC,KAAjB,EAAwBE,MAAxB,EAAgCG,MAAhC,EAAwCF,OAAxC;AACD;AACF;;AACDF,EAAAA,QAAQ,CAACI,MAAD,CAAR;AACD;;AAED,eAAeP,IAAf","sourcesContent":["import rules from '../rule/';\nimport { isEmptyValue } from '../util';\n\nfunction type(rule, value, callback, source, options) {\n  var ruleType = rule.type;\n  var errors = [];\n  var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);\n  if (validate) {\n    if (isEmptyValue(value, ruleType) && !rule.required) {\n      return callback();\n    }\n    rules.required(rule, value, source, errors, options, ruleType);\n    if (!isEmptyValue(value, ruleType)) {\n      rules.type(rule, value, source, errors, options);\n    }\n  }\n  callback(errors);\n}\n\nexport default type;"]},"metadata":{},"sourceType":"module"}