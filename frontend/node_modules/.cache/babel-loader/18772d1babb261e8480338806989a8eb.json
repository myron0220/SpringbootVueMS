{"ast":null,"code":"require(\"core-js/modules/es.regexp.exec.js\");\n\nrequire(\"core-js/modules/es.string.replace.js\");\n\n/**\n * Copyright 2004-present Facebook. All Rights Reserved.\n *\n * @providesModule UserAgent_DEPRECATED\n */\n\n/**\n *  Provides entirely client-side User Agent and OS detection. You should prefer\n *  the non-deprecated UserAgent module when possible, which exposes our\n *  authoritative server-side PHP-based detection to the client.\n *\n *  Usage is straightforward:\n *\n *    if (UserAgent_DEPRECATED.ie()) {\n *      //  IE\n *    }\n *\n *  You can also do version checks:\n *\n *    if (UserAgent_DEPRECATED.ie() >= 7) {\n *      //  IE7 or better\n *    }\n *\n *  The browser functions will return NaN if the browser does not match, so\n *  you can also do version compares the other way:\n *\n *    if (UserAgent_DEPRECATED.ie() < 7) {\n *      //  IE6 or worse\n *    }\n *\n *  Note that the version is a float and may include a minor version number,\n *  so you should always use range operators to perform comparisons, not\n *  strict equality.\n *\n *  **Note:** You should **strongly** prefer capability detection to browser\n *  version detection where it's reasonable:\n *\n *    http://www.quirksmode.org/js/support.html\n *\n *  Further, we have a large number of mature wrapper functions and classes\n *  which abstract away many browser irregularities. Check the documentation,\n *  grep for things, or ask on javascript@lists.facebook.com before writing yet\n *  another copy of \"event || window.event\".\n *\n */\nvar _populated = false; // Browsers\n\nvar _ie, _firefox, _opera, _webkit, _chrome; // Actual IE browser for compatibility mode\n\n\nvar _ie_real_version; // Platforms\n\n\nvar _osx, _windows, _linux, _android; // Architectures\n\n\nvar _win64; // Devices\n\n\nvar _iphone, _ipad, _native;\n\nvar _mobile;\n\nfunction _populate() {\n  if (_populated) {\n    return;\n  }\n\n  _populated = true; // To work around buggy JS libraries that can't handle multi-digit\n  // version numbers, Opera 10's user agent string claims it's Opera\n  // 9, then later includes a Version/X.Y field:\n  //\n  // Opera/9.80 (foo) Presto/2.2.15 Version/10.10\n\n  var uas = navigator.userAgent;\n  var agent = /(?:MSIE.(\\d+\\.\\d+))|(?:(?:Firefox|GranParadiso|Iceweasel).(\\d+\\.\\d+))|(?:Opera(?:.+Version.|.)(\\d+\\.\\d+))|(?:AppleWebKit.(\\d+(?:\\.\\d+)?))|(?:Trident\\/\\d+\\.\\d+.*rv:(\\d+\\.\\d+))/.exec(uas);\n  var os = /(Mac OS X)|(Windows)|(Linux)/.exec(uas);\n  _iphone = /\\b(iPhone|iP[ao]d)/.exec(uas);\n  _ipad = /\\b(iP[ao]d)/.exec(uas);\n  _android = /Android/i.exec(uas);\n  _native = /FBAN\\/\\w+;/i.exec(uas);\n  _mobile = /Mobile/i.exec(uas); // Note that the IE team blog would have you believe you should be checking\n  // for 'Win64; x64'.  But MSDN then reveals that you can actually be coming\n  // from either x64 or ia64;  so ultimately, you should just check for Win64\n  // as in indicator of whether you're in 64-bit IE.  32-bit IE on 64-bit\n  // Windows will send 'WOW64' instead.\n\n  _win64 = !!/Win64/.exec(uas);\n\n  if (agent) {\n    _ie = agent[1] ? parseFloat(agent[1]) : agent[5] ? parseFloat(agent[5]) : NaN; // IE compatibility mode\n\n    if (_ie && document && document.documentMode) {\n      _ie = document.documentMode;\n    } // grab the \"true\" ie version from the trident token if available\n\n\n    var trident = /(?:Trident\\/(\\d+.\\d+))/.exec(uas);\n    _ie_real_version = trident ? parseFloat(trident[1]) + 4 : _ie;\n    _firefox = agent[2] ? parseFloat(agent[2]) : NaN;\n    _opera = agent[3] ? parseFloat(agent[3]) : NaN;\n    _webkit = agent[4] ? parseFloat(agent[4]) : NaN;\n\n    if (_webkit) {\n      // We do not add the regexp to the above test, because it will always\n      // match 'safari' only since 'AppleWebKit' appears before 'Chrome' in\n      // the userAgent string.\n      agent = /(?:Chrome\\/(\\d+\\.\\d+))/.exec(uas);\n      _chrome = agent && agent[1] ? parseFloat(agent[1]) : NaN;\n    } else {\n      _chrome = NaN;\n    }\n  } else {\n    _ie = _firefox = _opera = _chrome = _webkit = NaN;\n  }\n\n  if (os) {\n    if (os[1]) {\n      // Detect OS X version.  If no version number matches, set _osx to true.\n      // Version examples:  10, 10_6_1, 10.7\n      // Parses version number as a float, taking only first two sets of\n      // digits.  If only one set of digits is found, returns just the major\n      // version number.\n      var ver = /(?:Mac OS X (\\d+(?:[._]\\d+)?))/.exec(uas);\n      _osx = ver ? parseFloat(ver[1].replace('_', '.')) : true;\n    } else {\n      _osx = false;\n    }\n\n    _windows = !!os[2];\n    _linux = !!os[3];\n  } else {\n    _osx = _windows = _linux = false;\n  }\n}\n\nvar UserAgent_DEPRECATED = {\n  /**\n   *  Check if the UA is Internet Explorer.\n   *\n   *\n   *  @return float|NaN Version number (if match) or NaN.\n   */\n  ie: function ie() {\n    return _populate() || _ie;\n  },\n\n  /**\n   * Check if we're in Internet Explorer compatibility mode.\n   *\n   * @return bool true if in compatibility mode, false if\n   * not compatibility mode or not ie\n   */\n  ieCompatibilityMode: function ieCompatibilityMode() {\n    return _populate() || _ie_real_version > _ie;\n  },\n\n  /**\n   * Whether the browser is 64-bit IE.  Really, this is kind of weak sauce;  we\n   * only need this because Skype can't handle 64-bit IE yet.  We need to remove\n   * this when we don't need it -- tracked by #601957.\n   */\n  ie64: function ie64() {\n    return UserAgent_DEPRECATED.ie() && _win64;\n  },\n\n  /**\n   *  Check if the UA is Firefox.\n   *\n   *\n   *  @return float|NaN Version number (if match) or NaN.\n   */\n  firefox: function firefox() {\n    return _populate() || _firefox;\n  },\n\n  /**\n   *  Check if the UA is Opera.\n   *\n   *\n   *  @return float|NaN Version number (if match) or NaN.\n   */\n  opera: function opera() {\n    return _populate() || _opera;\n  },\n\n  /**\n   *  Check if the UA is WebKit.\n   *\n   *\n   *  @return float|NaN Version number (if match) or NaN.\n   */\n  webkit: function webkit() {\n    return _populate() || _webkit;\n  },\n\n  /**\n   *  For Push\n   *  WILL BE REMOVED VERY SOON. Use UserAgent_DEPRECATED.webkit\n   */\n  safari: function safari() {\n    return UserAgent_DEPRECATED.webkit();\n  },\n\n  /**\n   *  Check if the UA is a Chrome browser.\n   *\n   *\n   *  @return float|NaN Version number (if match) or NaN.\n   */\n  chrome: function chrome() {\n    return _populate() || _chrome;\n  },\n\n  /**\n   *  Check if the user is running Windows.\n   *\n   *  @return bool `true' if the user's OS is Windows.\n   */\n  windows: function windows() {\n    return _populate() || _windows;\n  },\n\n  /**\n   *  Check if the user is running Mac OS X.\n   *\n   *  @return float|bool   Returns a float if a version number is detected,\n   *                       otherwise true/false.\n   */\n  osx: function osx() {\n    return _populate() || _osx;\n  },\n\n  /**\n   * Check if the user is running Linux.\n   *\n   * @return bool `true' if the user's OS is some flavor of Linux.\n   */\n  linux: function linux() {\n    return _populate() || _linux;\n  },\n\n  /**\n   * Check if the user is running on an iPhone or iPod platform.\n   *\n   * @return bool `true' if the user is running some flavor of the\n   *    iPhone OS.\n   */\n  iphone: function iphone() {\n    return _populate() || _iphone;\n  },\n  mobile: function mobile() {\n    return _populate() || _iphone || _ipad || _android || _mobile;\n  },\n  nativeApp: function nativeApp() {\n    // webviews inside of the native apps\n    return _populate() || _native;\n  },\n  android: function android() {\n    return _populate() || _android;\n  },\n  ipad: function ipad() {\n    return _populate() || _ipad;\n  }\n};\nmodule.exports = UserAgent_DEPRECATED;","map":{"version":3,"sources":["/Users/kidsama/Documents/Full_Stack/SpringbootVueMS/frontend/node_modules/normalize-wheel/src/UserAgent_DEPRECATED.js"],"names":["_populated","_ie","_firefox","_opera","_webkit","_chrome","_ie_real_version","_osx","_windows","_linux","_android","_win64","_iphone","_ipad","_native","_mobile","_populate","uas","navigator","userAgent","agent","exec","os","parseFloat","NaN","document","documentMode","trident","ver","replace","UserAgent_DEPRECATED","ie","ieCompatibilityMode","ie64","firefox","opera","webkit","safari","chrome","windows","osx","linux","iphone","mobile","nativeApp","android","ipad","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright 2004-present Facebook. All Rights Reserved.\n *\n * @providesModule UserAgent_DEPRECATED\n */\n\n/**\n *  Provides entirely client-side User Agent and OS detection. You should prefer\n *  the non-deprecated UserAgent module when possible, which exposes our\n *  authoritative server-side PHP-based detection to the client.\n *\n *  Usage is straightforward:\n *\n *    if (UserAgent_DEPRECATED.ie()) {\n *      //  IE\n *    }\n *\n *  You can also do version checks:\n *\n *    if (UserAgent_DEPRECATED.ie() >= 7) {\n *      //  IE7 or better\n *    }\n *\n *  The browser functions will return NaN if the browser does not match, so\n *  you can also do version compares the other way:\n *\n *    if (UserAgent_DEPRECATED.ie() < 7) {\n *      //  IE6 or worse\n *    }\n *\n *  Note that the version is a float and may include a minor version number,\n *  so you should always use range operators to perform comparisons, not\n *  strict equality.\n *\n *  **Note:** You should **strongly** prefer capability detection to browser\n *  version detection where it's reasonable:\n *\n *    http://www.quirksmode.org/js/support.html\n *\n *  Further, we have a large number of mature wrapper functions and classes\n *  which abstract away many browser irregularities. Check the documentation,\n *  grep for things, or ask on javascript@lists.facebook.com before writing yet\n *  another copy of \"event || window.event\".\n *\n */\n\nvar _populated = false;\n\n// Browsers\nvar _ie, _firefox, _opera, _webkit, _chrome;\n\n// Actual IE browser for compatibility mode\nvar _ie_real_version;\n\n// Platforms\nvar _osx, _windows, _linux, _android;\n\n// Architectures\nvar _win64;\n\n// Devices\nvar _iphone, _ipad, _native;\n\nvar _mobile;\n\nfunction _populate() {\n  if (_populated) {\n    return;\n  }\n\n  _populated = true;\n\n  // To work around buggy JS libraries that can't handle multi-digit\n  // version numbers, Opera 10's user agent string claims it's Opera\n  // 9, then later includes a Version/X.Y field:\n  //\n  // Opera/9.80 (foo) Presto/2.2.15 Version/10.10\n  var uas = navigator.userAgent;\n  var agent = /(?:MSIE.(\\d+\\.\\d+))|(?:(?:Firefox|GranParadiso|Iceweasel).(\\d+\\.\\d+))|(?:Opera(?:.+Version.|.)(\\d+\\.\\d+))|(?:AppleWebKit.(\\d+(?:\\.\\d+)?))|(?:Trident\\/\\d+\\.\\d+.*rv:(\\d+\\.\\d+))/.exec(uas);\n  var os    = /(Mac OS X)|(Windows)|(Linux)/.exec(uas);\n\n  _iphone = /\\b(iPhone|iP[ao]d)/.exec(uas);\n  _ipad = /\\b(iP[ao]d)/.exec(uas);\n  _android = /Android/i.exec(uas);\n  _native = /FBAN\\/\\w+;/i.exec(uas);\n  _mobile = /Mobile/i.exec(uas);\n\n  // Note that the IE team blog would have you believe you should be checking\n  // for 'Win64; x64'.  But MSDN then reveals that you can actually be coming\n  // from either x64 or ia64;  so ultimately, you should just check for Win64\n  // as in indicator of whether you're in 64-bit IE.  32-bit IE on 64-bit\n  // Windows will send 'WOW64' instead.\n  _win64 = !!(/Win64/.exec(uas));\n\n  if (agent) {\n    _ie = agent[1] ? parseFloat(agent[1]) : (\n          agent[5] ? parseFloat(agent[5]) : NaN);\n    // IE compatibility mode\n    if (_ie && document && document.documentMode) {\n      _ie = document.documentMode;\n    }\n    // grab the \"true\" ie version from the trident token if available\n    var trident = /(?:Trident\\/(\\d+.\\d+))/.exec(uas);\n    _ie_real_version = trident ? parseFloat(trident[1]) + 4 : _ie;\n\n    _firefox = agent[2] ? parseFloat(agent[2]) : NaN;\n    _opera   = agent[3] ? parseFloat(agent[3]) : NaN;\n    _webkit  = agent[4] ? parseFloat(agent[4]) : NaN;\n    if (_webkit) {\n      // We do not add the regexp to the above test, because it will always\n      // match 'safari' only since 'AppleWebKit' appears before 'Chrome' in\n      // the userAgent string.\n      agent = /(?:Chrome\\/(\\d+\\.\\d+))/.exec(uas);\n      _chrome = agent && agent[1] ? parseFloat(agent[1]) : NaN;\n    } else {\n      _chrome = NaN;\n    }\n  } else {\n    _ie = _firefox = _opera = _chrome = _webkit = NaN;\n  }\n\n  if (os) {\n    if (os[1]) {\n      // Detect OS X version.  If no version number matches, set _osx to true.\n      // Version examples:  10, 10_6_1, 10.7\n      // Parses version number as a float, taking only first two sets of\n      // digits.  If only one set of digits is found, returns just the major\n      // version number.\n      var ver = /(?:Mac OS X (\\d+(?:[._]\\d+)?))/.exec(uas);\n\n      _osx = ver ? parseFloat(ver[1].replace('_', '.')) : true;\n    } else {\n      _osx = false;\n    }\n    _windows = !!os[2];\n    _linux   = !!os[3];\n  } else {\n    _osx = _windows = _linux = false;\n  }\n}\n\nvar UserAgent_DEPRECATED = {\n\n  /**\n   *  Check if the UA is Internet Explorer.\n   *\n   *\n   *  @return float|NaN Version number (if match) or NaN.\n   */\n  ie: function() {\n    return _populate() || _ie;\n  },\n\n  /**\n   * Check if we're in Internet Explorer compatibility mode.\n   *\n   * @return bool true if in compatibility mode, false if\n   * not compatibility mode or not ie\n   */\n  ieCompatibilityMode: function() {\n    return _populate() || (_ie_real_version > _ie);\n  },\n\n\n  /**\n   * Whether the browser is 64-bit IE.  Really, this is kind of weak sauce;  we\n   * only need this because Skype can't handle 64-bit IE yet.  We need to remove\n   * this when we don't need it -- tracked by #601957.\n   */\n  ie64: function() {\n    return UserAgent_DEPRECATED.ie() && _win64;\n  },\n\n  /**\n   *  Check if the UA is Firefox.\n   *\n   *\n   *  @return float|NaN Version number (if match) or NaN.\n   */\n  firefox: function() {\n    return _populate() || _firefox;\n  },\n\n\n  /**\n   *  Check if the UA is Opera.\n   *\n   *\n   *  @return float|NaN Version number (if match) or NaN.\n   */\n  opera: function() {\n    return _populate() || _opera;\n  },\n\n\n  /**\n   *  Check if the UA is WebKit.\n   *\n   *\n   *  @return float|NaN Version number (if match) or NaN.\n   */\n  webkit: function() {\n    return _populate() || _webkit;\n  },\n\n  /**\n   *  For Push\n   *  WILL BE REMOVED VERY SOON. Use UserAgent_DEPRECATED.webkit\n   */\n  safari: function() {\n    return UserAgent_DEPRECATED.webkit();\n  },\n\n  /**\n   *  Check if the UA is a Chrome browser.\n   *\n   *\n   *  @return float|NaN Version number (if match) or NaN.\n   */\n  chrome : function() {\n    return _populate() || _chrome;\n  },\n\n\n  /**\n   *  Check if the user is running Windows.\n   *\n   *  @return bool `true' if the user's OS is Windows.\n   */\n  windows: function() {\n    return _populate() || _windows;\n  },\n\n\n  /**\n   *  Check if the user is running Mac OS X.\n   *\n   *  @return float|bool   Returns a float if a version number is detected,\n   *                       otherwise true/false.\n   */\n  osx: function() {\n    return _populate() || _osx;\n  },\n\n  /**\n   * Check if the user is running Linux.\n   *\n   * @return bool `true' if the user's OS is some flavor of Linux.\n   */\n  linux: function() {\n    return _populate() || _linux;\n  },\n\n  /**\n   * Check if the user is running on an iPhone or iPod platform.\n   *\n   * @return bool `true' if the user is running some flavor of the\n   *    iPhone OS.\n   */\n  iphone: function() {\n    return _populate() || _iphone;\n  },\n\n  mobile: function() {\n    return _populate() || (_iphone || _ipad || _android || _mobile);\n  },\n\n  nativeApp: function() {\n    // webviews inside of the native apps\n    return _populate() || _native;\n  },\n\n  android: function() {\n    return _populate() || _android;\n  },\n\n  ipad: function() {\n    return _populate() || _ipad;\n  }\n};\n\nmodule.exports = UserAgent_DEPRECATED;\n"]},"metadata":{},"sourceType":"script"}