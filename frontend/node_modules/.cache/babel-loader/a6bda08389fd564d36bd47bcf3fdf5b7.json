{"ast":null,"code":"import \"core-js/modules/es.array.join.js\";\nimport * as util from '../util';\nvar ENUM = 'enum';\n/**\n *  Rule for validating a value exists in an enumerable list.\n *\n *  @param rule The validation rule.\n *  @param value The value of the field on the source object.\n *  @param source The source object being validated.\n *  @param errors An array of errors that this rule may add\n *  validation errors to.\n *  @param options The validation options.\n *  @param options.messages The validation messages.\n */\n\nfunction enumerable(rule, value, source, errors, options) {\n  rule[ENUM] = Array.isArray(rule[ENUM]) ? rule[ENUM] : [];\n\n  if (rule[ENUM].indexOf(value) === -1) {\n    errors.push(util.format(options.messages[ENUM], rule.fullField, rule[ENUM].join(', ')));\n  }\n}\n\nexport default enumerable;","map":{"version":3,"sources":["/Users/kidsama/Documents/Full_Stack/SpringbootVueMS/frontend/node_modules/async-validator/es/rule/enum.js"],"names":["util","ENUM","enumerable","rule","value","source","errors","options","Array","isArray","indexOf","push","format","messages","fullField","join"],"mappings":";AAAA,OAAO,KAAKA,IAAZ,MAAsB,SAAtB;AACA,IAAIC,IAAI,GAAG,MAAX;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,UAAT,CAAoBC,IAApB,EAA0BC,KAA1B,EAAiCC,MAAjC,EAAyCC,MAAzC,EAAiDC,OAAjD,EAA0D;AACxDJ,EAAAA,IAAI,CAACF,IAAD,CAAJ,GAAaO,KAAK,CAACC,OAAN,CAAcN,IAAI,CAACF,IAAD,CAAlB,IAA4BE,IAAI,CAACF,IAAD,CAAhC,GAAyC,EAAtD;;AACA,MAAIE,IAAI,CAACF,IAAD,CAAJ,CAAWS,OAAX,CAAmBN,KAAnB,MAA8B,CAAC,CAAnC,EAAsC;AACpCE,IAAAA,MAAM,CAACK,IAAP,CAAYX,IAAI,CAACY,MAAL,CAAYL,OAAO,CAACM,QAAR,CAAiBZ,IAAjB,CAAZ,EAAoCE,IAAI,CAACW,SAAzC,EAAoDX,IAAI,CAACF,IAAD,CAAJ,CAAWc,IAAX,CAAgB,IAAhB,CAApD,CAAZ;AACD;AACF;;AAED,eAAeb,UAAf","sourcesContent":["import * as util from '../util';\nvar ENUM = 'enum';\n\n/**\n *  Rule for validating a value exists in an enumerable list.\n *\n *  @param rule The validation rule.\n *  @param value The value of the field on the source object.\n *  @param source The source object being validated.\n *  @param errors An array of errors that this rule may add\n *  validation errors to.\n *  @param options The validation options.\n *  @param options.messages The validation messages.\n */\nfunction enumerable(rule, value, source, errors, options) {\n  rule[ENUM] = Array.isArray(rule[ENUM]) ? rule[ENUM] : [];\n  if (rule[ENUM].indexOf(value) === -1) {\n    errors.push(util.format(options.messages[ENUM], rule.fullField, rule[ENUM].join(', ')));\n  }\n}\n\nexport default enumerable;"]},"metadata":{},"sourceType":"module"}